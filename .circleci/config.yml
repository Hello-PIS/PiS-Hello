version: 2.1

jobs:
  build:
    docker:
      - image: gradle:jdk11-alpine
    working_directory: /tmp
    steps:
      - run:
          name: Creating  Artifacts
          command: |
              echo "my artifact file" > /tmp/artifact-1;
              mkdir /tmp/artifacts;
              echo "my artifact files in a dir" > /tmp/artifacts/artifact-2;
      - run:
          command: |
            echo "my artifact file on_fail" > /tmp/artifact-1;
            mkdir /tmp/artifacts;
            echo "my artifact files in a dir on_fail" > /tmp/artifacts/artifact-2;
          when: on_fail

      - store_artifacts:
          path: /tmp/artifact-1
          destination: artifact-file

      - store_artifacts:
          path: /tmp/artifacts

  test:
    docker:
      - image: gradle:jdk11-alpine
    steps:
      - run:
          name: Creating  Artifacts
          command: |
            echo "my artifact file" > /tmp/artifact-1;
            mkdir /tmp/artifacts;
            echo "my artifact files in a dir" > /tmp/artifacts/artifact-2;
      - run:
          name: "Update apt"
          command: "apk add --update openssh-client git sed"
      - checkout
      - run:
          name: "Build project"
          command: "cd server && gradle build"
      - run:
          name: "Run tests"
          command: "cd server && gradle test"
#      - store_test_results:
#          path: /tmp/artifacts
      - store_artifacts:
          path: /tmp/artifacts

  publish:
    docker:
      - image: gradle:jdk11-alpine
    steps:
      - run:
          name: "Update apt"
          command: "apk add --update openssh-client git sed"
      - checkout
      - run:
          name: "Build project"
          command: "cd server && gradle build"
      - run:
          name: "Publish a package"
          command: |
            sed -i 's/${ARTIFACTORY_USERNAME}/'${ARTIFACTORY_USERNAME}'/g' server/gradle.properties
            sed -i 's/${ARTIFACTORY_PASSWORD}/'${ARTIFACTORY_PASSWORD}'/g' server/gradle.properties
            cd server && gradle artifactoryPublish

  store_results:
    docker:
      - image: gradle:jdk11-alpine
    steps:
      - checkout
      - run:
          name: "Build project"
          command: "cd server && gradle build"
      - run:
          name: "Run tests"
          command: "cd server && gradle test"
      -run:
          name: "Store jar"
          command: |
            mkdir -p /tmp/app
            cp ./server/build/libs/hello-0.0.1-SNAPSHOT.jar /tmp/app
      - store_artifacts:
          path: /tmp/app

  deploy:
    working_directory: ~/tmp
    docker:
      - image: google/cloud-sdk
    steps:
      - checkout
      - run:
          name: "Upload server"
          command: |
            echo $GCLOUD_SERVICE_KEY | gcloud auth activate-service-account --key-file=-
            gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
            gcloud --quiet config set compute/zone ${GOOGLE_COMPUTE_ZONE}

            gcloud --quiet compute scp --recurse /root/tmp/app $USER@pis:~/pis
#      - run:
#          name: "Run server"
#          command: |
#            gcloud --quiet compute ssh $USER@pis --strict-host-key-checking=no --command "fuser 8080/tcp && fuser -k 8080/tcp || echo 0"
#            gcloud --quiet compute ssh $USER@pis --strict-host-key-checking=no --command "cd pis && nohup server/gradlew -b server/build.gradle.kts bootRun &>/dev/null &" &
#
#            gcloud --quiet compute ssh $USER@pis --strict-host-key-checking=no --command "exit"

workflows:
  say-hello-workflow:
    jobs:
#      - build
      - test
      - publish
      - store_results
      - deploy
